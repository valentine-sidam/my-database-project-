/**
 * uploadEmployeesFromCSV.js
 * ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏Ç‡πâ‡∏≤ Firebase Firestore
 */

const fs = require('fs');
const csv = require('csv-parser');

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå Firebase Admin SDK ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
let admin, db;
try {
  admin = require('firebase-admin');
  const serviceAccount = require('./my-database-project-firebase-adminsdk.json');
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firebase (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á)
  if (!admin.apps.length) {
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount)
    });
  }
  db = admin.firestore();
  console.log("‚úÖ Firebase Admin SDK ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
} catch (error) {
  console.log("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Firebase Admin SDK key");
  console.log("üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå 'my-database-project-firebase-adminsdk.json'");
  console.log("   ‡∏à‡∏≤‡∏Å Firebase Console > Project Settings > Service Accounts");
  db = null;
}

// üìñ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
function readEmployeesFromCSV(filename) {
  return new Promise((resolve, reject) => {
    const employees = [];
    
    fs.createReadStream(filename)
      .pipe(csv())
      .on('data', (row) => {
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö Firestore
        const employee = {
          employee_id: row['‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'] || '',
          first_name: row['‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢'] || '',
          last_name: row['‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ó‡∏¢'] || '',
          section: row['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô'] || '',
          group: row['‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°'] || '',
          department: row['‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢'] || '',
          position: row['‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'] || '',
          full_name: `${row['‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢'] || ''} ${row['‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ó‡∏¢'] || ''}`.trim()
        };
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ employee_id
        if (employee.employee_id) {
          employees.push(employee);
        }
      })
      .on('end', () => {
        console.log(`üìÑ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${employees.length} ‡∏Ñ‡∏ô`);
        resolve(employees);
      })
      .on('error', (error) => {
        reject(error);
      });
  });
}

// üì§ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ Firestore
async function uploadEmployeesToFirestore(employees) {
  if (!db) {
    console.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡πÑ‡∏î‡πâ");
    return false;
  }
  
  console.log(`üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ${employees.length} ‡∏Ñ‡∏ô...`);
  
  let successCount = 0;
  let errorCount = 0;
  
  for (let i = 0; i < employees.length; i++) {
    const employee = employees[i];
    
    try {
      // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ collection 'employees' ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ employee_id ‡πÄ‡∏õ‡πá‡∏ô document ID
      await db.collection('employees').doc(employee.employee_id).set(employee, { merge: true });
      successCount++;
      
      if (successCount % 50 === 0) {
        console.log(`‚è≥ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß ${successCount} ‡∏Ñ‡∏ô...`);
      }
    } catch (error) {
      console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà ${i + 1} (${employee.employee_id}): ${error.message}`);
      errorCount++;
    }
  }
  
  console.log(`\nüéâ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!`);
  console.log(`‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount} ‡∏Ñ‡∏ô`);
  console.log(`‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorCount} ‡∏Ñ‡∏ô`);
  
  return true;
}

// üîç ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö Batch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
async function uploadEmployeesBatch(employees, batchSize = 500) {
  if (!db) {
    console.log("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡πÑ‡∏î‡πâ");
    return false;
  }
  
  console.log(`üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Batch (${batchSize} ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠ batch)`);
  
  let totalSuccess = 0;
  let totalError = 0;
  
  for (let i = 0; i < employees.length; i += batchSize) {
    const batch = db.batch();
    const batchEmployees = employees.slice(i, i + batchSize);
    
    batchEmployees.forEach(employee => {
      if (employee.employee_id) {
        const docRef = db.collection('employees').doc(employee.employee_id);
        batch.set(docRef, employee, { merge: true });
      }
    });
    
    try {
      await batch.commit();
      totalSuccess += batchEmployees.length;
      console.log(`‚úÖ Batch ${Math.floor(i/batchSize) + 1}: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ${batchEmployees.length} ‡∏Ñ‡∏ô`);
    } catch (error) {
      console.error(`‚ùå Batch ${Math.floor(i/batchSize) + 1} ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
      totalError += batchEmployees.length;
    }
  }
  
  console.log(`\nüéâ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!`);
  console.log(`‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${totalSuccess} ‡∏Ñ‡∏ô`);
  console.log(`‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${totalError} ‡∏Ñ‡∏ô`);
  
  return true;
}

// üîç ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
async function previewEmployees(filename) {
  console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV...\n");
  
  try {
    const employees = await readEmployeesFromCSV(filename);
    
    if (employees.length === 0) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô");
      return [];
    }
    
    console.log(`‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${employees.length} ‡∏Ñ‡∏ô\n`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å
    console.log("üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å:");
    employees.slice(0, 5).forEach((emp, index) => {
      console.log(`\n--- ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà ${index + 1} ---`);
      console.log(`üÜî ‡∏£‡∏´‡∏±‡∏™: ${emp.employee_id}`);
      console.log(`üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${emp.full_name}`);
      console.log(`üè¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢: ${emp.department}`);
      console.log(`üíº ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${emp.position}`);
    });
    
    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const departmentCounts = {};
    const positionCounts = {};
    
    employees.forEach(emp => {
      departmentCounts[emp.department] = (departmentCounts[emp.department] || 0) + 1;
      positionCounts[emp.position] = (positionCounts[emp.position] || 0) + 1;
    });
    
    console.log("\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô:");
    Object.entries(departmentCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .forEach(([dept, count]) => {
        console.log(`   ${dept}: ${count} ‡∏Ñ‡∏ô`);
      });
    
    console.log("\nüíº ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (Top 5):");
    Object.entries(positionCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .forEach(([pos, count]) => {
        console.log(`   ${pos}: ${count} ‡∏Ñ‡∏ô`);
      });
    
    return employees;
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå:", error.message);
    return [];
  }
}

// üöÄ MAIN
async function main() {
  const filename = 'ToolBase System - Employees.csv';
  
  console.log("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô...\n");
  
  // 1. ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const employees = await previewEmployees(filename);
  
  if (employees.length === 0) {
    console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î");
    return;
  }
  
  console.log(`\nüì¶ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ${employees.length} ‡∏Ñ‡∏ô\n`);
  
  // 2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ Firebase
  if (db) {
    // ‡πÉ‡∏ä‡πâ batch upload ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å
    await uploadEmployeesBatch(employees, 100);
  } else {
    console.log("üí° ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏£‡∏¥‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firebase Admin SDK key");
    console.log("üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£:");
    console.log("   1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Firebase Console");
    console.log("   2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Project Settings > Service Accounts");
    console.log("   3. ‡∏Ñ‡∏•‡∏¥‡∏Å 'Generate new private key'");
    console.log("   4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô 'my-database-project-firebase-adminsdk.json'");
  }
}

// ‡∏£‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { 
  readEmployeesFromCSV, 
  uploadEmployeesToFirestore, 
  uploadEmployeesBatch, 
  previewEmployees 
};