/**
 * uploadDataFromCSV_Fixed.js
 * ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ Firebase Firestore (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
 */

const fs = require('fs');
const csv = require('csv-parser');

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå Firebase Admin SDK ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
let admin, db;
try {
    admin = require('firebase-admin');
    const serviceAccount = require('./my-database-project-firebase-adminsdk.json');
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firebase (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á)
    if (!admin.apps.length) {
        admin.initializeApp({
            credential: admin.credential.cert(serviceAccount)
        });
    }
    db = admin.firestore();
    console.log("‚úÖ Firebase Admin SDK ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
} catch (error) {
    console.log("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Firebase Admin SDK key");
    console.log("üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå 'my-database-project-firebase-adminsdk.json'");
    console.log("   ‡∏à‡∏≤‡∏Å Firebase Console > Project Settings > Service Accounts");
    db = null;
}

// üîç ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
function readCSVFile(filePath) {
    return new Promise((resolve, reject) => {
        const results = [];
        fs.createReadStream(filePath)
            .pipe(csv())
            .on('data', (data) => results.push(data))
            .on('end', () => resolve(results))
            .on('error', (error) => reject(error));
    });
}

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
async function uploadToolsFixed() {
    console.log('\nüîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)...');
    
    try {
        const tools = await readCSVFile('./web-app/ToolBase System - Summary.csv');
        console.log(`üìà ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠: ${tools.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        if (!db) {
            console.log('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ Firebase connection - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
            console.log('üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î:');
            console.log(transformTool(tools[0]));
            return;
        }
        
        let count = 0;
        const batchSize = 500;
        
        for (let i = 0; i < tools.length; i += batchSize) {
            const batch = db.batch(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á batch ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            const slice = tools.slice(i, i + batchSize);
            
            for (const tool of slice) {
                const toolData = transformTool(tool);
                if (toolData.id) {
                    const docRef = db.collection('tools').doc(toolData.id);
                    batch.set(docRef, toolData);
                    count++;
                }
            }
            
            await batch.commit();
            console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        }
        
        console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠:', error.message);
    }
}

// üîÑ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
function transformTool(tool) {
    // Clean old_code field (‡∏°‡∏µ \n ‡πÉ‡∏ô header)
    const oldCodeField = Object.keys(tool).find(key => key.includes('Old_Code'));
    const oldCode = oldCodeField ? tool[oldCodeField] : '';
    
    const serialNo = tool['Serial No.'] || '';
    const toolId = serialNo.replace(/[^a-zA-Z0-9\-_.]/g, '_') || `tool_${Date.now()}`;
    
    return {
        id: toolId,
        tool_name: tool['‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠'] || '',
        serial_no: serialNo,
        old_code: oldCode,
        unit: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á', // Fixed value
        status: tool['Status'] || '',
        location: tool['Project/Location'] || '',
        latest_update_date: tool['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏¥‡∏Å'] || '',
        note: '', // Empty as in original data
        current_responsible: tool['User'] || ''
    };
}

// üí∞ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Transactions ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
async function createTransactionsSafe() {
    console.log('\nüí∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Transactions...');
    
    try {
        const tools = await readCSVFile('./web-app/ToolBase System - Summary.csv');
        const employees = await readCSVFile('./ToolBase System - Employees.csv');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠
        const employeeMap = {};
        const employeeByCode = {};
        
        employees.forEach(emp => {
            const fullName = `${emp['‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢']} ${emp['‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ó‡∏¢']}`.trim();
            const empCode = emp['‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'];
            employeeMap[fullName] = emp;
            employeeByCode[empCode] = emp;
        });
        
        // ‡∏´‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        const toolsInUse = tools.filter(tool => tool['User'] && tool['User'].trim());
        console.log(`üìà ‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà: ${toolsInUse.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        const missingUsers = new Set();
        const validTransactions = [];
        
        for (const tool of toolsInUse) {
            const userName = tool['User'];
            let employee = employeeMap[userName];
            
            // ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
            if (!employee) {
                const userCode = userName.split(' ')[0]; // ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠
                employee = employeeByCode[userCode];
            }
            
            if (!employee) {
                missingUsers.add(userName);
            } else {
                const transactionData = transformTransactionSafe(tool, employee);
                if (transactionData) {
                    validTransactions.push(transactionData);
                }
            }
        }
        
        console.log(`‚ö†Ô∏è  ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (${missingUsers.size} ‡∏Ñ‡∏ô):`, [...missingUsers]);
        console.log(`‚úÖ Transactions ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ: ${validTransactions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        if (!db) {
            console.log('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ Firebase connection - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
            if (validTransactions.length > 0) {
                console.log('üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Transaction:');
                console.log(validTransactions[0]);
            }
            return;
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Transactions
        let count = 0;
        const batchSize = 500;
        
        for (let i = 0; i < validTransactions.length; i += batchSize) {
            const batch = db.batch();
            const slice = validTransactions.slice(i, i + batchSize);
            
            for (const transactionData of slice) {
                const docRef = db.collection('transactions').doc(`TRANS_${Date.now()}_${count}`);
                batch.set(docRef, transactionData);
                count++;
            }
            
            await batch.commit();
            console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Transaction ‡πÅ‡∏•‡πâ‡∏ß ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        }
        
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Transactions ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Transactions:', error.message);
    }
}

// üîÑ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Transaction (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
function transformTransactionSafe(tool, employee) {
    const userName = tool['User'];
    
    // Clean old_code field
    const oldCodeField = Object.keys(tool).find(key => key.includes('Old_Code'));
    const oldCode = oldCodeField ? tool[oldCodeField] : '';
    
    return {
        transaction_id: `auto_generated`,
        timestamp: new Date().toISOString(),
        employee: {
            id: employee['‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'],
            name: `${employee['‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢']} ${employee['‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ó‡∏¢']}`.trim()
        },
        project: tool['Project/Location'] || '',
        status: '‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠',
        action_reason: '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
        return_date: tool['‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô'] || '',
        tools: [
            {
                tool_name: tool['‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠'] || '',
                serial_no: tool['Serial No.'] || '',
                old_code: oldCode,
                amount: 1,
                unit: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
                note: `‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ ${tool['Project/Location'] || ''}`
            }
        ],
        additional_notes: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: ${tool['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß'] || ''} | ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ${userName}`
    };
}

// üìä ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
async function generateReport() {
    console.log('\nüìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    
    try {
        const employees = await readCSVFile('./ToolBase System - Employees.csv');
        const tools = await readCSVFile('./web-app/ToolBase System - Summary.csv');
        
        console.log('\n=== ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ===');
        console.log(`üë• ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${employees.length} ‡∏Ñ‡∏ô`);
        console.log(`üîß ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${tools.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
        const statusCount = {};
        tools.forEach(tool => {
            const status = tool['Status'] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
            statusCount[status] = (statusCount[status] || 0) + 1;
        });
        
        console.log('\nüìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠:');
        Object.entries(statusCount).forEach(([status, count]) => {
            console.log(`   ${status}: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        });
        
        // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
        const deptCount = {};
        employees.forEach(emp => {
            const dept = emp['‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢'] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
            deptCount[dept] = (deptCount[dept] || 0) + 1;
        });
        
        console.log('\nüè¢ ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô:');
        Object.entries(deptCount).forEach(([dept, count]) => {
            console.log(`   ${dept}: ${count} ‡∏Ñ‡∏ô`);
        });
        
        console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:', error.message);
    }
}

// üöÄ MAIN - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async function main() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)...');
    console.log('üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:', new Date().toLocaleDateString('th-TH'));
    
    try {
        // 1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
        await uploadToolsFixed();
        
        // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Transactions (‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
        await createTransactionsSafe();
        
        // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        await generateReport();
        
        console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    }
    
    process.exit(0);
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
main();