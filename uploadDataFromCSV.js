/**
 * uploadDataFromCSV.js
 * ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ Firebase Firestore
 * ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß
 */

const fs = require('fs');
const csv = require('csv-parser');

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå Firebase Admin SDK ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
let admin, db;
try {
    admin = require('firebase-admin');
    const serviceAccount = require('./my-database-project-firebase-adminsdk.json');
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firebase (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á)
    if (!admin.apps.length) {
        admin.initializeApp({
            credential: admin.credential.cert(serviceAccount)
        });
    }
    db = admin.firestore();
    console.log("‚úÖ Firebase Admin SDK ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
} catch (error) {
    console.log("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Firebase Admin SDK key");
    console.log("üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå 'my-database-project-firebase-adminsdk.json'");
    console.log("   ‡∏à‡∏≤‡∏Å Firebase Console > Project Settings > Service Accounts");
    db = null;
}

// üîç ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
function readCSVFile(filePath) {
    return new Promise((resolve, reject) => {
        const results = [];
        fs.createReadStream(filePath)
            .pipe(csv())
            .on('data', (data) => results.push(data))
            .on('end', () => resolve(results))
            .on('error', (error) => reject(error));
    });
}

// üìä ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
async function uploadEmployees() {
    console.log('\nüë• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô...');
    
    try {
        const employees = await readCSVFile('./ToolBase System - Employees.csv');
        console.log(`üìà ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${employees.length} ‡∏Ñ‡∏ô`);
        
        if (!db) {
            console.log('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ Firebase connection - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
            console.log('üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î:');
            console.log(transformEmployee(employees[0]));
            return;
        }
        
        const batch = db.batch();
        let count = 0;
        
        for (const emp of employees) {
            const employeeData = transformEmployee(emp);
            const docRef = db.collection('employees').doc(employeeData.employee_id);
            batch.set(docRef, employeeData);
            count++;
            
            // Upload in batches of 500
            if (count % 500 === 0) {
                await batch.commit();
                console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß ${count} ‡∏Ñ‡∏ô`);
            }
        }
        
        // Upload remaining
        if (count % 500 !== 0) {
            await batch.commit();
        }
        
        console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${count} ‡∏Ñ‡∏ô`);
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô:', error.message);
    }
}

// üîÑ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
function transformEmployee(emp) {
    return {
        employee_id: emp['‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'] || '',
        first_name: emp['‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢'] || '',
        last_name: emp['‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ó‡∏¢'] || '',
        full_name: `${emp['‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢'] || ''} ${emp['‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ó‡∏¢'] || ''}`.trim(),
        section: emp['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô'] || '', // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Project auto-fill
        group: emp['‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°'] || '',
        department: emp['‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢'] || '',
        position: emp['‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'] || ''
    };
}

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
async function uploadTools() {
    console.log('\nüîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠...');
    
    try {
        const tools = await readCSVFile('./web-app/ToolBase System - Summary.csv');
        console.log(`üìà ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠: ${tools.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        if (!db) {
            console.log('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ Firebase connection - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
            console.log('üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î:');
            console.log(transformTool(tools[0]));
            return;
        }
        
        const batch = db.batch();
        let count = 0;
        
        for (const tool of tools) {
            const toolData = transformTool(tool);
            if (toolData.id) {
                const docRef = db.collection('tools').doc(toolData.id);
                batch.set(docRef, toolData);
                count++;
                
                // Upload in batches of 500
                if (count % 500 === 0) {
                    await batch.commit();
                    console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
                }
            }
        }
        
        // Upload remaining
        if (count % 500 !== 0) {
            await batch.commit();
        }
        
        console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠:', error.message);
    }
}

// üîÑ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
function transformTool(tool) {
    // Clean old_code field (‡∏°‡∏µ \n ‡πÉ‡∏ô header)
    const oldCodeField = Object.keys(tool).find(key => key.includes('Old_Code'));
    const oldCode = oldCodeField ? tool[oldCodeField] : '';
    
    const serialNo = tool['Serial No.'] || '';
    const toolId = serialNo.replace(/[^a-zA-Z0-9\-_.]/g, '_') || `tool_${Date.now()}`;
    
    return {
        id: toolId,
        tool_name: tool['‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠'] || '',
        serial_no: serialNo,
        old_code: oldCode,
        unit: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á', // Fixed value
        status: tool['Status'] || '',
        location: tool['Project/Location'] || '',
        latest_update_date: tool['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏¥‡∏Å'] || '',
        note: '', // Empty as in original data
        current_responsible: tool['User'] || ''
    };
}

// üí∞ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Transactions ‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
async function createTransactions() {
    console.log('\nüí∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Transactions...');
    
    try {
        const tools = await readCSVFile('./web-app/ToolBase System - Summary.csv');
        const employees = await readCSVFile('./ToolBase System - Employees.csv');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        const employeeMap = {};
        employees.forEach(emp => {
            const fullName = `${emp['‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢']} ${emp['‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ó‡∏¢']}`.trim();
            employeeMap[fullName] = emp;
        });
        
        // ‡∏´‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        const toolsInUse = tools.filter(tool => tool['User'] && tool['User'].trim());
        console.log(`üìà ‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà: ${toolsInUse.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
        if (!db) {
            console.log('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ Firebase connection - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
            if (toolsInUse.length > 0) {
                console.log('üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Transaction:');
                console.log(transformTransaction(toolsInUse[0], employeeMap));
            }
            return;
        }
        
        const batch = db.batch();
        let count = 0;
        
        for (const tool of toolsInUse) {
            const transactionData = transformTransaction(tool, employeeMap);
            if (transactionData) {
                const docRef = db.collection('transactions').doc(`TRANS_${Date.now()}_${count}`);
                batch.set(docRef, transactionData);
                count++;
                
                // Upload in batches of 500
                if (count % 500 === 0) {
                    await batch.commit();
                    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Transaction ‡πÅ‡∏•‡πâ‡∏ß ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
                }
            }
        }
        
        // Upload remaining
        if (count % 500 !== 0) {
            await batch.commit();
        }
        
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Transactions ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Transactions:', error.message);
    }
}

// üîÑ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Transaction
function transformTransaction(tool, employeeMap) {
    const userName = tool['User'];
    const employee = employeeMap[userName];
    
    if (!employee) {
        console.warn(`‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ${userName}`);
        return null;
    }
    
    // Clean old_code field
    const oldCodeField = Object.keys(tool).find(key => key.includes('Old_Code'));
    const oldCode = oldCodeField ? tool[oldCodeField] : '';
    
    return {
        transaction_id: `auto_generated`,
        timestamp: new Date().toISOString(),
        employee: {
            id: employee['‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'],
            name: userName
        },
        project: tool['Project/Location'] || '',
        status: '‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠',
        action_reason: '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
        return_date: tool['‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô'] || '',
        tools: [
            {
                tool_name: tool['‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠'] || '',
                serial_no: tool['Serial No.'] || '',
                old_code: oldCode,
                amount: 1,
                unit: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
                note: `‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ ${tool['Project/Location'] || ''}`
            }
        ],
        additional_notes: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: ${tool['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß'] || ''}`
    };
}

// üöÄ MAIN - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async function main() {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV...');
    console.log('üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:', new Date().toLocaleDateString('th-TH'));
    
    try {
        // 1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
        await uploadEmployees();
        
        // 2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
        await uploadTools();
        
        // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Transactions
        await createTransactions();
        
        console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
        
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    }
    
    process.exit(0);
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
main();